#+TITLE: A Modern Take on Sketchpad
#+STARTUP:nologdone

Elevator pitch name might be sketchpad meets hypercard. Or 3D printers in space.

This isn't really about Sketchpad. I'm just taking the scope of what Sutherland
did as inspiration and a starting point.

* Intentions

	The immediate goal of this project is to achieve a bidirectional connection
	between direct drawing and code. Draw a shape and see the code that generates
	it (or in our case a potentially smoothed version of it). Modify the drawing
	and the code updates, modify the code and the drawing updates.

	The key to the generated code though is that it has to be useful, not just a
	huge list of line segments. I think it will be a lot easier to describe via a
	series of example use cases.

** Examples
*** Simple line drawing

		 Say I draw a rough circle. It isn't useful if the software captures it as a
		 series of points or the line segments connecting them — which is how canvas
		 and as far as I can tell most other drawing tools do it — we want to
		 capture the fact that it's a circle, or approximately a circle.

		 Of course we should keep the raw data the user entered, but we should also
		 try to fit higher level building blocks to the user input. If the user
		 entered a near circle, we should infer or prompt "did you really want a
		 circle?".

		 Taking this to the logical extreme we should have sliders controlling how
		 much smoothing the computer adds to the curve. The essential tradeoff is
		 between fidelity to the original drawing and simplicity of representation,
		 where simplicity is defined as a small number of "natural shapes"; things
		 like lines, arcs, bezier curves, and other drawings that the user
		 — or potentially other users — have entered in the past.

*** Abstracted shapes

		 Say I draw a picture of a flower. In the past the computer has seen rose curves
		 and recognises the petals as such. Ideally it would break my picture down into
		 pieces and link those pieces to the known curves. Of course I might not care
		 about that breakdown, so there should be an easy way to ignore it.

		 Recognising that the petals are all variations on the same shape, the computer
		 should offer to make them all the same, spaced and rotated in a radially
		 symmetric pattern — here we need to recognise near radial symmetry. That might
		 not be what you want though, maybe you want the slight imperfections and
		 variations, but you do want them evenly spaced.

*** Generated Drawings

		Say I draw something, copy it and move it over and shrink it, and then do
		that again, and again, and I want to keep it going ad infinitum. If I do it
		manually a couple of times, I should see code akin to

		#+BEGIN_SRC clojure
			(def shape {...})

			(def picture
				(compose
				 (-> shape (move :right 2) (scale 0.5))
				 (-> shape (move :right 3.1) (scale 0.27))
				 (-> shape (move :right 3.6) (scale 0.125))))

		#+END_SRC

		Which I would then have to manually transform into a map over ranges to
		create my infinite shrinking image.

		Aside: If we render lazily — by just aborting the render if the thing to be
		rendered can't be bigger than a pixel or are out of the frame — then we can
		easily accomodate fractal and other lazily infinite drawings. I think that
		would be very valuable (??? cool maybe), but let's see how that fits into
		the bigger picture.

		Better would be if the computer generated a transducer and specific data
		examples to fit in. Something like:

		#+BEGIN_SRC clojure
			(def shape ...)

			(def no-auto-name
				(map (fn [affinetx]
							 (affine-transform shape affinetx))))

			(def picture
				(transduce no-auto-name compose [atx1 atx2 atx3]))
		#+END_SRC

		Would this acutally be better? Think accessibility, it should be a simple
		matter of changing a sequence of [0.5 0.26 0.124] into (map #(2**-%) (range
		2)) and a sequence of [2 3 3.5] into (map #(inc (reduce + %)) (map #(2**-%)
		(map #(take % (range)) (range)))).

		That's nothing approaching simple. The concept is so much simpler;
		successive halves and triangular numbers. Why is it so hard to express
		simple geometric math in code? What can we do about that?

*** Linking to Real Data

		If I want to draw a link graph inforgraphic, I want to draw a couple of
		circles with lines connecting them, then I want to connect the radii and
		colours of the circles and the length or width or colour of the lines to the
		data. There should be a quick interface to accomplish this. Something like
		the IDE that Victor talks about in that mario talk that inspired
		lighttable. Of course that IDE was faked, but the ideas are great.

		Furthermore to make inforgraphics really useful, we want to be able to
		dynamically modify them as the underlying data or context changes. I'm not
		keen to take on the kind of stuff D3 does, but it is a great solution to
		that problem. Since we're using canvas and not SVG, maybe we can simplify it
		by making everything explicitely immediate mode. No screen state at all. One
		of the hardest problems for me when learning to program games in highschool
		was keeping the game state and the screen state in sync. I ended up wiping
		the screen on every frame because I couldn't deal with it, thus reinventing
		immediate mode graphics (my games were stuttery and slow, but those 80486s
		didn't
		have GPUs).

*** Reacting to the User

		Would it be too off topic to use such a tool to create rudimentary UIs?
		After all most UIs are just infographics with mostly detrimental
		interaction.

** From Drawing to Programming

	The essential idea here is to replace the explicit programming of shapes with
	the ability to drawn and *see* what the computer interprets your drawing as.

	Given sufficient control to manipulate the drawings after the computer
	interprets them, this could be a useful drawing tool in itself, but would
	most likely just be a toy.

	If you can link data into your drawing, then you can create data graphics in
	something akin to the fashion of drawing.

	Beyond that, what if you can link in arbitrary logic? Can you create a
	programming environment based on visual and spatial feedback?

	In short I'm leaning towards making this into a UI building tool. A way to
	hand draw mockups and turn them into a working program all at once.

	Would it be possible to separate the data, the interaction, and the visual
	representation sufficiently to make porting this over to an existing cljs or
	js program less painful. Can the designer's work be used for production
	engineering?

	Rather than writing another hundred UIs, I'd rather make rails.

	I needed to remind myself how this fits into the grand scheme of the
	document. It really is about new and broader forms of computer programming. I
	think we need to move away from interaction and towards communication.

	But why stop at UIs? There are concepts that are easier to express visually or
	geometricall that symbolically / logically. There are also things that are
	easier to express haptically — imagine trying to learn gymnastics from a book
	— but that's another topic.

	If as Hadamard proposed genius is the ability to think in multiple modes at
	once, then we need to find new modes of interaction with computers.

** Rough Stages
*** Pictures <=> Code
*** Data Driven Drawings
		A la D3
*** Data Driven Apps
		Domain Data => UI spec (data) => Data display
*** Interactivity
		This is late in the game for a reason. Read [[http://worrydream.com/#!/MagicInk][magic ink]]. It's an extreme
		opinion, and I think we will need interactivity eventually, but we can and
		should get pretty damned far without.
*** Visual Abstraction
		If you're drawing something similar to something else you or someone else
		has drawn in the past then the system should recognise that and use it to
		simplify the picture. It should also be able to smooth out pictures by
		recognising that you've drawn an almost-square.
** Purpose

	 Of course the most interesting task here is making the computer abstract
	 input and break it down into things it recognises and can then reassemble
	 into the drawing you gave it. In my opinion this is a task that requires real
	 visual intelligence, but I don't think it's too much to approach.

* Research Notes
** Notes from Sutherland
	 Mostly almost cliched advice now, but the fact he came to all these
	 conclusions basically de novo is incredible.

*** Generic structures are critical
	 Everything was kept in a single ring buffer. A big reason why this was a
	 win was that it allowed him to implement a basic form of automatic garbage
	 collection. But it also minimises unnecessary encapsulation. Relates to
	 Kay's insistence on dynamic inspectability of *everything*.

*** Separate generic functions from those specific to individual shapes / operations
	 You have to keep in mind that this was a decade before Kay said OO. Maybe
	 by now this observations is less profound.

*** Unlimited Applicability of generic operators.
	 If anything can do X try to let everything do X.

	 This relates back to the previous point, but encourages one to make as much
	 generic as possible. Similar philosophy to Clojure's data abstractions. Also
	 has a strong similarity to the idea of natural transformations as fully
	 parametrically polymorphic functions.

*** Hierarchy of shapes
	 Something that processing makes unduly difficult is shape composition. Say
	 I've drawn a nice flower petal and I want to copy and rotate it 30 degrees
	 12 times and save the new thing. I now have a flower. Suppose I now want to
	 modify the basic petal from which the flower is made. In most modern
	 drawing languages I'd have to rebuild the compound shape after modifying
	 the base part, but in sketchpad IS tracked the relations between shapes so
	 that modifying the petal modifies anything built from the petal.

	 Kay says that this instance-master relation is just the object-class
	 relation of "real" OO. But there's something more, the instances dynamically
	 track changes to the masters and compound shapes are created almost
	 algebraically from instances (thus forming new masters from instances). This
	 seems like a blending of Hindley-Milner style type algebra combined with
	 prototypical inhertance of types.

** Notes from Victor

	 Interactive analog widgets to control model parameters should be embedded as
	 close to the data they modify as possible. This means that upon clicking a
	 curve you should access sliders controlling symmetry and smoothness
	 enhancements, colour picker, labels, and anything else that pertains to that
	 particular shape.

	 Aside: Magic ink is not about what I recall at all. It's really an essay
	 about how design focused on interaction and data entry is destructive to
	 usability. That's the lesson that we learned the hard way at Semion. The way
	 he introduces the topic causes a bit of a gut defensive reaction in me just
	 because he's very absolute and general about it. The widest scope of his
	 claims are untennable, but in reality his examples come from a much smaller
	 space in which his claims are obviously and powerfully true.

	 I wish I had given the essay more credit and brought it to the table three
	 years ago.

	 [[http://worrydream.com/#!/LearnableProgramming][This]] is the essay I was thinking of, it seems. [[http://worrydream.com/#!2/LadderOfAbstraction][Up and Down the Ladder of
	 Abstraction]] is also a good one.

	 [[http://worrydream.com/#!/substroke][Substroke]] is clearly relevant.

*** Environment Criteria
		Victor's checklist for evaluating a programming environment for learnability

		Does the environment allow the learner to...

		read the vocabulary? -- Is meaning transparent? Is meaning explained in context, by showing and telling?
		follow the flow? -- Is time visible and tangible? At all meaningful granularities?
		see the state? -- Does the environment show the data? Show comparisons? Is hidden state eliminated?
		create by reacting? -- Is something on screen as soon as possible? Is the parts bucket on the floor?
		create by abstracting? -- Can the programmer start concrete, then generalize?

		Does the language provide...

		identity and metaphor? -- Is the computer's world connected to the programmer's world?
		decomposition? -- Can the programmer break down her thoughts into mind-sized pieces?
		recomposition? -- Can the programmer put diverse pieces together?
		readability? -- Is meaning transparent?

**** How do we compare?
** Readings / references
*** [[http://www.red3d.com/cwr/papers/1982/ASAS82.html]]
*** [[http://hillside.net/plop/2006/Papers/Library/interactive_informationgrap.pdf][Towards a Pattern Language for Interactive Information Graphics]]
*** [[https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations]]

** Tools to use (or just steal from)
 - [[https://github.com/ztellman/penumbra]]
 - http://exupero.org/hazard/post/fractals/
 - [[http://perfectionkills.com/exploring-canvas-drawing-techniques/][drawing tools]]
*** [[http://luna-lang.org][Luna]]
		Visual UI that generates code.
** AI and RL
	 - [[http://soar.eecs.umich.edu/][Soar]]
		 It sounds rather vain and premature to design a framework for intelligence
		 without any useful definition of intelligence, but there's almost certainly
		 useful stuff here.

		 Fuck that. This is basically machine code. People are so concerned with
		 speed nowadays that they're willing to make the job 1000x harder just so
		 that it's 100x faster. Compute time is cheap, I'm not doing that.

	 - [[http://www.princeton.edu/~ndaw/d11a.pdf][Phasic Dopamine System and TD learning]]

	 - Chunking
		 - [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4138363/][Chunking performance seems independent of conscious attention]]
			 In motor skills.
		 - [[http://www.psych.utoronto.ca/users/peterson/psy430s2001/Miller%20GA%20Magical%20Seven%20Psych%20Review%201955.pdf][Miller's Basic Results]]
		 - [[http://www.bcp.psych.ualberta.ca/~mike/Pearl_Street/PSYCO354/pdfstuff/Readings/Gobet1.pdf][Chunking in Human Learning]]
		 - [[https://en.wikipedia.org/wiki/EPAM][EPAM]]
		 - [[http://chrest.info/][CHREST]]
	 - Other models of learning
		 - [[https://en.wikipedia.org/wiki/Adaptive_resonance_theory][Adaptive Resonance Theory]]
		 - [[https://en.wikipedia.org/wiki/Self-organizing_map][Kohonen Networks]]

* Dev Log
** [2017-05-31 Wed 13:05]
	 Had an idea this morning that we may want to randomly generate pictures, but
	 if we do that then the artist probably won't want the picture to change every
	 time you look at it. This fits into my rejection of randomness as
	 nondeterminism pretty cleanly: randomness is just arbitraryness — "I don't
	 care", not "god plays dice" — so anything random should explicitely have the
	 seed set as part of the datastructure so that it's deterministic but not
	 predetermined.
** [2017-06-01 Thu 20:35]
	 We need a composable representation of shapes. I'm starting to think that we
	 should go back to the old idea of representing basic squiggles as normalised
	 images with baked in affine transforms. But then what is the shape itself?

	 How do we represent the link from master to instance?

	 How do we represent the link from master to master?

	 How do we transition an instance from one master to another?

	 How do we prevent the proliferation of (unneeded) shapes?
** [2017-06-01 Thu 20:58]
	 God, why am I spending so much time dealing with damned handlers? You'd think
	 this would be easy by now.

	 I can simplify my data model to make the input handling trivial, but is that
	 really the way to do it? In general no, but in this case I think treating
	 each individual mouse movement separately might in fact be a better solution.

	 Even if I change the data model, I still need some way to extend to multiple
	 types of events.

	 I also want to be able to draw with two fingers at once. What's the point of
	 a touch screen if you can only use it as a glorified mouse?
** [2017-06-04 Sun 10:42]
	 For normal people cartesian coordinates have the origin in the bottom
	 left. CRTs and memory mapping made it easier to put it in the top left but
	 that's no longer relvant. Honestly Descartes' choices were arbitrary as well,
	 but they were based on visual biases that humans still have, so they're still
	 relevant at least.

	 [[https://processing.org/tutorials/drawing/][This]] is wrong. Instead of writing a little code to make the computer do what
	 humans expect it to, they wrote a page to reeducate humans to do what's
	 easiest for the computer.

	 TODO: Look into other coordinate systems and see if they might make more
	 sense to untrained people.
** [2017-06-04 Sun 10:47]
	 I've got to ditch the editor and just use a textarea for now. I've only
	 looked at two editors, but they both choke on large amounts of code when I
	 try to use them in an immediate fashion. I'm not interested in maintaining a
	 pair of parsetrees and mapping diffs between them. React can do that for me.

	 But for now forget highlighting and the rest of the editor nonsense. Let's
	 just get the code mapping working.
** [2017-06-05 Mon 10:05]
	 Check out https://github.com/viebel/klipse for an editor.
** [2017-06-05 Mon 11:34]
	 The code evaluation is a huge security hole right now. I'm going to need to
	 work up a parser and sanitiser scheme. At least I get to learn something new.
** [2017-06-05 Mon 12:28]
	 The re-frame lein template app has google closure config flags setup. That
	 will be handy.
** [2017-06-24 Sat 13:43]
	 Let's retry encapsulating CSS in code. I've made a wrapper library
	 (sketch.components.css) which defines CSS widgets like buttons and the grid
	 structure. The only assumptions used in the client code is that the grid is
	 twelve columns and meta-data on the column elements (of the form {:width 5})
	 determins the width.

	 Hopefully this separates the CSS stuff from the markup sufficiently that we
	 can swap out Skeleton for something more appropriate when the time comes
	 without rewriting anything outside of the skeleton namespace.

	 I haven't accounted for responsivity in the current design!

	 Ideally the rows themselves would be encoded in metadata and the entire
	 layout would be meta to the component markup and functionality. That would
	 require putting a tree walker in place but wouldn't be very hard.

	 That would lead to extra wrapper divs which I'd like to avoid if
	 possible. Not that they're really a problem judging by standard practice, but
	 it leaves me feeling a bit icky inside,

	 So what do we do about custom HTML bits like the textarea I've added :style
	 metadata to?

	 In keeping with the tradition of not having CSS classes in the components,
	 I'm using inlike styles. That's generally considered a no no. Why is that?
	 In this particular case I seriously doubt designers will be able to wade in
	 anyway if they're the kind who can't read anything but html.

	 Should I maybe try to isolate CSS depended widgets and give them classes and
	 use CSS for them? I don't know. I should probably pick up a book and learn
	 something properly about CSS...
** [2017-06-26 Mon 13:58]
	 Finally have proper code editing working. The value in the editor needs to be
	 able to stay in an intermediate erroneous state while the user is typing
	 otherwise how can they ever get to working code? Obvious of course, but it's
	 surprising what one can overlook.

	 Still have a problem where the image on the canvas disappears if the code
	 reads but contains invalid shapes. Adding a default noop draw* method as an
	 interim fix.
** [2017-06-26 Mon 14:05]
	 Had to toss up the entire app data model again. It was surprisingly simple to
	 do with re-frame's app structuring. I'm impressed. I still have some ugly
	 interconnected state updates in the update-drawing fns in events.editor and
	 events.canvas.

	 I'd like to figure out how to get all of the state syncronisation logic in
	 one place instead of dancing between the two event models. It's dead simple
	 right now but it isn't going to stay that way.
** [2017-06-26 Mon 17:31]
	 A thought occured to me while watching [[https://www.youtube.com/watch?v=2UJ5t2116lI][this]]. Very tangentially related to the
	 talk material but isn't it fascinating how our brains work?

	 Abstractions in code serve the same purpose as concepts, metaphor, and other
	 forms of linguistic abstractions in thought. Thought and language in
	 particular are far more flexible than code because everyone interprets every
	 concept in their own way. There's enough overlap from person to person that
	 communication can happen relatively easily, but there's also enough
	 divergence that we can turn our language to remarkably different tasks.

	 Need an example... Gravity (Aristotle, Galileo, Newton, Einstein), an app,
	 random, any kind of jargon, &c..

	 The holy grail of computation is reuse. No one has really come close to
	 solving it in general though there are a small number of well (and properly
	 so) respected things that can and are used over and over and over (think
	 joda-time, numpy, &c.). Most of the time though, the abstraction, whatever it
	 is, is made for a use case that overlaps 80% with your use case and you call
	 it a leaky abstraction and hack through it.

	 Can we create reusable concepts, modules, abstractions, metaphor, whatever,
	 that can diverge in meaning, in the edges and interpretation, but still
	 retain enough commonality to really count as reuse? I don't even know if that
	 question is well formed.
** [2017-06-27 Tue 21:34]
	 I don't know what I want to do with shapes. Rather I want to do too many
	 things at once with them and don't know how to reconcile all of that.

	 So what do we want shapes to do?

* Implementation
** Features
	 These are kind of redundant with the examples given in the first section.
*** Curve Smoothing
		When I hand draw a figure, I should get a slider that tells the computer how
		much smoothing I'm willing to tolerate. Smoothing is a somewhat vague term,
		but I'm going to equate it with simplicity. Lines are simpler than
		polynomials are simpler than splines...

		So the slider is basically a visualisation of the tradeoff between fidelity
		and simplicity.
*** Automatic Reuse
		If I draw a square, and then later in the code draw another square, that
		should get picked up. There should only be one square.
*** Connection from code linkage to visual graph
		Compound shapes are programmatically constructed from simple shapes. This
		can easily be seen from the code defining them, but needs to be present in
		an isomorphic fashion in the UI.
** Old Plan
*** Algorithmic First Steps
**** DONE Capture brush strokes on canvas
**** DONE Create a Primitive Language
		 Take cavas' path primitives and wrap them up so that we can compose them at
		 will.

		 Note: [2017-03-13 Mon 14:24] This is acutally pretty simple. Or at least
		 what I've chosen to start is. Use Bezier curves for the low level
		 representation and then create an open ended set of higher level
		 abstractions starting with line and circle.
*** UI
**** TODO Widgets to control smoothness and symmetry
**** TODO Basic Code Editor
		 This isn't super high priority since we can probably just sync with emacs
		 through a file buffer for initial development.

		 N.B.: There are already some pretty nice browser based cljs editors. Don't
		 make your own. Not until you have to.
*** Advanced
		Read "not doing for now". These things are more a part of Triton.
**** TODO Search Algorithm
		 Using the metric we should be able to come up with an A* style algo to find
		 good fits.
**** TODO Tweakable fit parameters
		 This is important because we don't want to research from scratch as the
		 smoothness tolerance increases / decreases. Maybe everything will be so
		 fast that this won't matter, but my intuition is that the search should be
		 as dynamic (cachable) as possible.
**** TODO Implement a metric for curve matching [50%]
		 Average pixel difference between curves? Average square distance? We'll
		 have to experiment and take runtime into account, this is going to be run a
		 lot.

		 What if we just XOR the bitmaps and count the black pixels? That sounds
		 fast.

		 I think these are the only 2 approaches
		 1. For each pixel in C1 find the closest pixel in C2 and average over all of
				C1 (what average?)
		 2. Render the curves to (a fake) screen and compare the bitmaps.

		The first will probably be more accurate since it's a genuine metric on the
		space of piecewise continuous curves in R2, but it's a lot of work

		[[http://jpfop.sourceforge.net/jaxml-batik/html-docs/test.html][These guys]] take the second approach. They're creating SVGs to match pngs,
		which is pretty similar to what I'm going for. But they expect near pixel
		perfect accuracy. I'm looking to idealise the shapes somewhat.

***** DONE Choose approach
			Note: [2017-03-13 Mon 14:32]
			The first approach is cubic in the length of the curve and involves some
			difficult discrete math (probably not for a discrete math guy, but I'm an
			analyst). The second should run linear in the number of pixels on the
			screen (which for big curves should be less than the length of the curve
			squared) and I think I can do it quickly to test.

			A quick test is always a good choice.
***** TODO Render bezier path to hidden canvas
***** DONE Get bitmap (as data) from canvas
***** TODO Compare curves
** Plan
	 The project focus is shifting to be more about the new medium and less
	 immediately about the AI ideas. I think that's for the best.
*** Tasks
**** Priority
***** DONE Update project docs
			This entire document is way out of date.

			Try to rewrite the description if you can and make it more clear.
***** TODO Work out drawing flow
			This is a tricky one. We want a single "drawing" to be atomic in the code,
			but we want to be able to derive pictures from others, etc.. Maybe
			something along the lines of undo chunking would be appropriate?
***** TODO Fix Coordinate System
			Origin in the bottom left.
***** TODO Master - Instance Logic
			Sketchpad had it right in allowing objects to be instances of a master
			object so that editing the master would change all occurences in the
			compound product.

			There's a mutability problem here though. I think what we want is a
			prototypical inheritance system where you can create new templates from old
			ones and where you can instantiate templates. Templates shouldn't change
			though lest editing one picture change another. Instead you need a way take
			some set of instances of a template and link them to a new template at will
			so that we have a localised version of this master-instance editing style.

			This is conceptually similar to Clojure's core principles: instances should
			be mutable references to immuatable data.
***** TODO Look at that declarative programming framework
***** TODO Set up a real data model for shapes
			The current draw functions are a mess. The specification of what shapes
			are is scattered all over the place and nothing holds it in sync across
			the app.
**** Done
***** DONE Clean up previous demos
			The code is in such a terrible state right now. Experiments left for two
			months... Time to clean it up and document it so that I don't have to start
			from scratch a third time!
***** DONE Capture drawn figures as code
***** DONE Demote Editing
			It's taking up too much time and not as important as the generating code
			for shapes. Just use a textarea for now and I'll get what I need for a
			proof of concept.
***** DONE Security
			Evalling raw code is a horrendous security hole. Don't do it.

			Thought: This is intended as an end user application. No server, no page so
			to speak. Any programming environment is a huge security risk: if you
			compile and run code you copied off the internet without understanding it
			you're in trouble. Of course that's a cop out. At least we have the browser
			to protect you from most things...

			This needs serious thought. Most programmers don't do the right thing most
			of the time, so obviously if we want non-programmers to use this we have to
			figure out a security model that works by itself most of the time.

			Kay said that the browser should be part of the kernel if you really want
			complete freedom with decent safety. I've never really considered kernel
			programming.

			Look, if we stick to pure EDN then most of these problems go away. We're
			reading data, not evalling code. I'm pretty sure I can describe any drawing
			purely declaratively.
**** Not Doing (right now)
***** TODO BUG: when code in textarea reformats, we lose the cursor.
			That makes editing code very difficult.
***** TODO Examine how paren-soup and figwheel deal with broken code
			We can't go trying to load code that doesn't read.

			Low priority
