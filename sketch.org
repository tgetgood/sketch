#+TITLE: A Modern Take on Sketchpad
#+STARTUP:nologdone

This isn't really about Sketchpad. I'm just taking the scope of what Sutherland
did as inspiration.

* Intentions

	This project is part of the bigger [[file:~/org/modes.org][modes of interaction]] research agenda.

	The ultimate goal of this project is to achieve a bidirectional connection
	between direct drawing and code. Draw a shape and see the code that generates
	it (or in our case a potentially smoothed version of it). Modify the drawing
	and the code updates, modify the code and the drawing updates.

	The key to the generated code though is that it has to be useful, not just a
	huge list of line segments. I think it will be a lot easier to describe via a
	series of example use cases.

** Examples
*** Simple line drawing

		 Say I draw a rough circle. It isn't useful if the software captures it as a
		 series of points or the line segments connecting them — which is how canvas
		 and as far as I can tell most other drawing tools do it — we want to
		 capture the fact that it's a circle, or approximately a circle.

		 Of course we should keep the raw data the user entered, but we should also
		 try to fit higher level building blocks to the user input. If the user
		 entered a near circle, we should infer or prompt "did you really want a
		 circle?".

		 Taking this to the logical extreme we should have sliders controlling how
		 much smoothing the computer adds to the curve. The essential tradeoff is
		 between fidelity to the original drawing and simplicity of representation,
		 where simplicity is defined as a small number of "natural shapes"; things
		 like lines, arcs, bezier curves, and other drawings that the user
		 — or potentially other users — have entered in the past.

*** Abstracted shapes

		 Say I draw a picture of a flower. In the past the computer has seen rose curves
		 and recognises the petals as such. Ideally it would break my picture down into
		 pieces and link those pieces to the known curves. Of course I might not care
		 about that breakdown, so there should be an easy way to ignore it.

		 Recognising that the petals are all variations on the same shape, the computer
		 should offer to make them all the same spaced and rotated in a radially
		 symmetric pattern — here we need to recognise near radial symmetry. That might
		 not be what you want though, maybe you want the slight imperfections and
		 variations, but you do want them evenly spaced.

*** Generated Drawings

		Say I draw something, copy it and move it over and shrink it, and then do
		that again, and again, and I want to keep it going ad infinitum. If I do it
		manually a couple of times, I should see code akin to

		#+BEGIN_SRC clojure
			(def shape {...})

			(def picture
				(compose
				 (-> shape (move :right 2) (scale 0.5))
				 (-> shape (move :right 3.1) (scale 0.27))
				 (-> shape (move :right 3.6) (scale 0.125))))

		#+END_SRC

		Which I would then have to manually transform into a map over ranges to
		create my infinite regression.

		Aside: If we render lazily — by just aborting the render if the thing to be
		rendered can't be bigger than a pixel — then we can easily accomodate
		fractal and other lazily infinite drawings. I think that would be very
		valuable, but let's see how that fits into the bigger picture.

		Better would be if the computer generated a transducer and specific data
		examples to fit in. Something like:

		#+BEGIN_SRC clojure
			(def shape ...)

			(def no-auto-name
				(map (fn [affinetx]
							 (affine-transform shape affinetx))))

			(def picture
				(transduce no-auto-name compose [atx1 atx2 atx3]))
		#+END_SRC

		Would this acutally be better? Think accessibility, it should be a simple
		matter of changing a sequence of [0.5 0.26 0.124] into (map #(2**-%) (range
		2)) and a sequence of [2 3 3.5] into (map #(inc (reduce + %)) (map #(2**-%)
		(map #(take % (range)) (range)))).

		That's nothing approaching simple. The concept is so much simpler;
		successive halves and triangular numbers. Why is it so hard to express
		simple geometric math in code? What can we do about that?

*** Linking to Real Data

		If I want to draw a link graph inforgraphic, I want to draw a couple of
		circles with lines connecting them, then I want to connect the radii and
		colours of the circles and the length or width or colour of the lines to the
		data. There should be a quick interface to accomplish this. Something like
		the IDE that Victor talks about in that mario talk that inspired
		lighttable. Of course that IDE was faked, but the ideas are great.

		Furthermore to make inforgraphics really useful, we want to be able to
		dynamically modify them as the underlying data or context changes. I'm not
		keen to take on the kind of stuff D3 does, but it is a great solution to
		that problem. Since we're using canvas and not SVG, maybe we can simplify it
		by making everything explicitely immediate mode. No screen state at all. One
		of the hardest problems for me when learning to program games in highschool
		was keeping the game state and the screen state in sync. I ended up wiping
		the screen on every frame because I couldn't deal with it, thus reinventing
		the immediate mode (my games were stuttery and slow, but those 80486s didn't
		have GPUs).

*** Reacting to the User

		Would it be too off topic to use such a tool to create rudimentary UIs?
		After all most UIs are just infographics with mostly detrimental
		interaction.

** Purpose

	 Of course the most interesting task here is making the computer abstract
	 input and break it down into things it recognises and can then reassemble
	 into the drawing you gave it. In my opinion this is a task that requires real
	 visual intelligence, but I don't think it's too much to approach.

** Things to try

	An interesting first experiment would be to try and map hand drawing to
	B-splines. Symmetry and smoothness can be parameters adjustable by the user.

	Simpler and also interesting would be to give the computer a primitive vocab
	of built in canvas directives and come up with a search algorithm to try and
	fit those to whatever you draw. This could actually turn out to be a harder
	but more interesting problem.

* Research
** Notes from Sutherland
	 Mostly almost cliched advice now, but the fact he came to all these
	 conclusions basically de novo is incredible.

*** Generic structures are critical
	 Everything was kept in a single ring buffer. A big reason why this was a
	 win was that it allowed him to implement a basic form of automatic garbage
	 collection. But it also minimises unnecessary encapsulation. Relates to
	 Kay's insistence on dynamic inspectability of *everything*.

*** Separate generic functions from those specific to individual shapes / operations
	 You have to keep in mind that this was a decade before Kay said OO. Maybe
	 by now this observations is less profound.

*** Unlimited Applicability of generic operators.
	 If anything can do X try to let everything do X.

	 This relates back to the previous point, but encourages one to make as much
	 generic as possible. Similar philosophy to Clojure's data abstractions. Also
	 has a strong similarity to the idea of natural transformations as fully
	 parametrically polymorphic functions.

*** Hierarchy of shapes
	 Something that processing makes unduly difficult is shape composition. Say
	 I've drawn a nice flower petal and I want to copy and rotate it 30 degrees
	 12 times and save the new thing. I now have a flower. Suppose I now want to
	 modify the basic petal from which the flower is made. In most modern
	 drawing languages I'd have to rebuild the compound shape after modifying
	 the base part, but in sketchpad IS tracked the relations between shapes so
	 that modifying the petal modifies anything built from the petal.

	 Kay says that this instance-master relation is just the object-class
	 relation of "real" OO. But there's something more, the instances dynamically
	 track changes to the masters and compound shapes are created almost
	 algebraically from instances (thus forming new masters from instances). This
	 seems like a blending of Hindley-Milner style type algebra combined with
	 prototypical inhertance of types.

** Notes from Victor

	 Interactive analog widgets to control model parameters should be embedded as
	 close to the data they modify as possible. This means that upon clicking a
	 curve you should access sliders controlling symmetry and smoothness
	 enhancements, colour picker, labels, and anything else that pertains to that
	 particular shape.

	 Aside: Magic ink is not about what I recall at all. It's really an essay
	 about how design focused on interaction and data entry is destructive to
	 usability. That's the lesson that we learned the hard way at Semion. The way
	 he introduces the topic causes a bit of a gut defensive reaction in me just
	 because he's very absolute and general about it. The widest scope of his
	 claims are untennable, but in reality his examples come from a much smaller
	 space in which his claims are obviously and powerfully true.

	 I wish I had given the essay more credit and brought it to the table three
	 years ago.

	 [[http://worrydream.com/#!/LearnableProgramming][This]] is the essay I was thinking of, it seems. [[http://worrydream.com/#!2/LadderOfAbstraction][Up and Down the Ladder of
	 Abstraction]] is also a good one.

** Readings / references
** [[http://www.red3d.com/cwr/papers/1982/ASAS82.html]]
** [[http://hillside.net/plop/2006/Papers/Library/interactive_informationgrap.pdf][Towards a Pattern Language for Interactive Information Graphics]]
** [[https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations]]

** Tools to use (or just steal from)
 - [[https://github.com/ztellman/penumbra]]
 - http://exupero.org/hazard/post/fractals/
 - [[http://perfectionkills.com/exploring-canvas-drawing-techniques/][drawing tools]]

* A Bigger Picture

	The essential idea here is to replace the explicit programming of shapes with
	the ability to drawn and *see* what the computer interprets your drawing as.

	Given sufficient control to manipulate the drawings after the computer
	interprets them, this could be a useful drawing tool in itself, but would
	most likely just be a toy.

	If you can link data into your drawing, then you can create data graphics in
	something akin to the fashion of drawing.

	Beyond that, what if you can link in arbitrary logic? Can you create a
	programming environment based on visual and spatial feedback?

	In short I'm leaning towards making this into a UI building tool. A way to
	hand draw mockups and turn them into a working program all at once.

	Would it be possible to separate the data, the interaction, and the visual
	representation sufficiently to make porting this over to an existing cljs or
	js program less painful. Can the designer's work be used for production
	engineering?

	Rather than writing another hundred UIs, I'd rather make rails.

	I needed to remind myself how this fits into the grand scheme of the
	document. It really is about new and broader forms of computer programming. I
	think we need to move away from interaction and towards communication.

	But why stop at UIs? There are concepts that are easier to express visually or
	geometricall that symbolically / logically. There are also things that are
	easier to express haptically — imagine trying to learn gymnastics from a book
	— but that's another topic.

	If as Hadamard proposed genius is the ability to think in multiple modes at
	once, then we need to find new modes of interaction with computers.

* Implementation
** Things to do
*** Algorithmic First Steps
**** DONE Capture brush strokes on canvas
**** DONE Create a Primitive Language
		 Take cavas' path primitives and wrap them up so that we can compose them at
		 will.

		 Note: [2017-03-13 Mon 14:24] This is acutally pretty simple. Or at least
		 what I've chosen to start is. Use Bezier curves for the low level
		 representation and then create an open ended set of higher level
		 abstractions starting with line and circle.
**** TODO Implement a metric for curve matching [50%]
		 Average pixel difference between curves? Average square distance? We'll
		 have to experiment and take runtime into account, this is going to be run a
		 lot.

		 What if we just XOR the bitmaps and count the black pixels? That sounds
		 fast.

		 I think these are the only 2 approaches
		 1. For each pixel in C1 find the closest pixel in C2 and average over all of
				C1 (what average?)
		 2. Render the curves to (a fake) screen and compare the bitmaps.

		The first will probably be more accurate since it's a genuine metric on the
		space of piecewise continuous curves in R2, but it's a lot of work

		[[http://jpfop.sourceforge.net/jaxml-batik/html-docs/test.html][These guys]] take the second approach. They're creating SVGs to match pngs,
		which is pretty similar to what I'm going for. But they expect near pixel
		perfect accuracy. I'm looking to idealise the shapes somewhat.

***** DONE Choose approach
			Note: [2017-03-13 Mon 14:32]
			The first approach is cubic in the length of the curve and involves some
			difficult discrete math (probably not for a discrete math guy, but I'm an
			analyst). The second should run linear in the number of pixels on the
			screen (which for big curves should be less than the length of the curve
			squared) and I think I can do it quickly to test.

			A quick test is always a good choice.
***** TODO Render bezier path to hidden canvas
***** DONE Get bitmap (as data) from canvas
***** TODO Compare curves

**** TODO Search Algorithm
		 Using the metric we should be able to come up with an A* style algo to find
		 good fits.
**** TODO Tweakable fit parameters
		 This is important because we don't want to research from scratch as the
		 smoothness tolerance increases / decreases. Maybe everything will be so
		 fast that this won't matter, but my intuition is that the search should be
		 as dynamic (cachable) as possible.
**** TODO Master - Instance Logic
		 Sketchpad had it right in allowing objects to be instances of a master
		 object so that editing the master would change all occurences in the
		 compound product.

		 There's a mutability problem here though. I think what we want is a
		 prototypical inheritance system where you can create new templates from old
		 ones and where you can instantiate templates. Templates shouldn't change
		 though lest editing one picture change another. Instead you need a way take
		 some set of instances of a template and link them to a new template at will
		 so that we have a localised version of this master-instance editing style.

		 This is conceptually similar to Clojure's core principles: instances should
		 be mutable references to immuatable data.
*** UI
**** TODO Widgets to control smoothness and symmetry
**** TODO Basic Code Editor
		 This isn't super high priority since we can probably just sync with emacs
		 through a file buffer for initial development.

		 N.B.: There are already some pretty nice browser based cljs editors. Don't
		 make your own. Not until you have to.
* Devlog
** [2017-03-07 Tue 14:51]
	 After working most of the morning on learning how canvas works and looking
	 at some wrappers (fabric.js and monet) I'm starting to see that the
	 processing style stateful imperative programming is really just a sort of
	 visual machine code.

	 Do I have to implement my own hll on top of it and then write my new idea
	 on top of that? Crazy.

** [2017-03-13 Mon]
	 The canvas path api looks like:
		 - line
		 - quadratic bezier
		 - cubic bezier
		 - arc
		 - ellipse
		 - rectangle

		On the one hand, all of these curves can be approximated very closely by a
		small number of bezier cubics so we don't need to complicate our model by
		distinguishing between them. On the other hand, the whole point is to
		capture the drawing in the most humanly natural way. Abstraction is all
		about finding higher level concepts that make things simpler. Semicircle is
		simpler than two bezier curves in a path. To most people almost anything is
		simpler than a bezier curve.

		At a low level I think it makes a lot of sense to just use bezier
		curves. But the model needs to learn when the bezier curves can be replaced
		by higer level constructs. This same logic should then translate to user
		defined higher level shapes.

		In terms of actual development I think we should start with a low level
		representation in terms purely of bezier cubics, with a base set of
		"abstractions" based on the other paths in the API.

** [2017-03-13 Mon 14:23]

	 Spec really is handy for keeping data formats straight. It replaces my blocks
	 of pseudo type comments wih something way more powerful. I think it'll be
	 worth the investment to learn more thoroughly.
